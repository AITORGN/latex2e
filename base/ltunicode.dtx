% \iffalse meta-comment
%
% Copyright 2014
% The LaTeX3 Project and any individual authors listed elsewhere
% in this file.
%
% This file is part of the LaTeX base system.
% -------------------------------------------
%
% It may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
%    http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This file has the LPPL maintenance status "maintained".
%
% The list of all files belonging to the LaTeX base distribution is
% given in the file `manifest.txt'. See also `legal.txt' for additional
% information.
%
% The list of derived (unpacked) files belonging to the distribution
% and covered by LPPL is defined by the unpacking scripts (with
% extension .ins) which are part of the distribution.
%
% -----------------------------------------------------------------------------
%
% The same approach as used in \pkg{DocStrip}: if \cs{documentclass}
% is undefined then skip the driver, allowing the file to be used directly.
% This works as the \cs{fi} is only seen if \LaTeX{} is not in use. The odd
% \cs{jobname} business allows the extraction to work with \LaTeX{} provided
% an appropriate \texttt{.ins} file is set up.
%<*gobble>
\ifx\jobname\relax
  \let\documentclass\undefined
\fi
\begingroup\expandafter\expandafter\expandafter\endgroup
\expandafter\ifx\csname documentclass\endcsname\relax
\else
  \csname fi\endcsname
%</gobble>
%
%<*driver>
\ProvidesFile{ltunicode.dtx}
  [2014/12/31 v1.0 LaTeX Kernel (Unicode data)]
\documentclass{ltxdoc}
\begin{document}
\DocInput{\jobname.dtx}
\end{document}
%<*gobble>
\fi
%</gobble>
%</driver>
% \fi
%
% \GetFileInfo{ltunicode.dtx}
% \title{The \texttt{ltunicode.dtx} file\thanks
%     {This file has version number \fileversion, dated \filedate.}\\
%       for use with \LaTeXe}
% \author{The \LaTeX3 Project}
%
% \maketitle
%
% This script extracts data from the Unicode Consortium files
% \texttt{UnicodeData.txt}, \texttt{EastAsianWidth.txt} and
% \texttt{LineBreak.txt} to be used for setting up \LaTeXe{} with sane
% default settings when using the Xe\TeX{} and Lua\TeX{} engines. Details
% of the process are included in the code comments.
%
% \StopEventually{}
%
%    \begin{macrocode}
%<*script>
%    \end{macrocode}
%
% \section{General set up}
%
% The script is designed to work with plain \TeX{} and so |@| is made into
% a `letter' using the primitive approach.
%    \begin{macrocode}
\catcode`\@=11 %
%    \end{macrocode}
%
% \begin{macro}{\gobble}
% \begin{macro}{\firsttoken}
%   Standard utilities.
%    \begin{macrocode}
\long\def\gobble#1{}
\long\def\firsttoken#1#2\relax{#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\storedpar}
%   A simple piece of test set up: the final line of the read file will be
%   tokenized by \TeX{} as \cs{par} which can be tested by \cs{ifx} provided
%   we have an equivalent available.
%    \begin{macrocode}
\def\storedpar{\par}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\unicoderead, \unicodewrite}
%   Set up the streams for data.
%    \begin{macrocode}
\newread\unicoderead
\newwrite\unicodewrite
%    \end{macrocode}
% \end{macro}
%
% \section{Verbatim copying}
%
% \begin{macro}{\verbatimcopy}
% \begin{macro}{\endverbatimcopy}
% \begin{macro}{\verbatimcopy@auxii}
% \begin{macro}{\verbatimcopy@auxii}
% \begin{macro}{\verbatim@endmarker}
%   Set up to read some material verbatim and write it to the output stream.
%   There needs to be a dedicated `clean up first line' macro, but other than
%   that life is simple enough.
%    \begin{macrocode}
\begingroup
  \catcode`\^^M=12 %
  \gdef\verbatimcopy{%
    \begingroup%
      \catcode`\^^M=12 %
      \catcode`\\=12 %
      \catcode`\{=12 %
      \catcode`\}=12 %
      \catcode`\#=12 %
      \catcode`\%=12 %
      \catcode`\ =12 %
      \endlinechar=`\^^M %
      \verbatimcopy@auxi
  }%
  \gdef\verbatimcopy@auxi#1^^M{%
    \expandafter\verbatimcopy@auxii\gobble#1^^M%
  }%
  \gdef\verbatimcopy@auxii#1^^M{%
    \def\temp{#1}%
    \ifx\temp\verbatim@endmarker%
      \expandafter\endgroup%
    \else%
      \ifx\temp\empty\else%
        \immediate\write\unicodewrite{#1}%
      \fi%
      \expandafter\verbatimcopy@auxii%
    \fi%
  }%
\endgroup%
\edef\verbatim@endmarker{\expandafter\gobble\string\\}
\edef\verbatim@endmarker{\verbatim@endmarker endverbatimcopy}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \section{File header section}
%
% With the mechanisms set up, open the data file for writing.
%    \begin{macrocode}
\immediate\openout\unicodewrite=ltunicode.ltx %
%    \end{macrocode}
% There are various lines that now need to go at the start of the file.
% First, there is some header information.
%    \begin{macrocode}
\verbatimcopy
%% This is the file `ltunicode.ltx',
%% generated using the script ltunicode.dtx.
%%
%% The data here are derived from the files
%%  - UnicodeData.txt
%% which are maintained by the Unicode Consortium.
%%
%% Copyright 2014
%% The LaTeX3 Project and any individual authors listed elsewhere
%% in this file.
%%
%% This file is part of the LaTeX base system.
%% -------------------------------------------
%%
%% It may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%    http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%%
%% This file has the LPPL maintenance status "maintained".
%%
%% The list of all files belonging to the LaTeX base distribution is
%% given in the file `manifest.txt'. See also `legal.txt' for additional
%% information.
\endverbatimcopy
%    \end{macrocode}
% Automatically include the current date.
%    \begin{macrocode}
\immediate\write\unicodewrite{%
  \expandafter\gobble\string\%\expandafter\gobble\string\%
  Generated on \the\year-\the\month-\the\day.
}
\immediate\write\unicodewrite{%
  \expandafter\gobble\string\%\expandafter\gobble\string\%
}
%    \end{macrocode}
%
% \section{Unicode character data}
%
% \begin{macro}{\parseunicodedata}
% \begin{macro}{\parseunicodedata@auxi}
% \begin{macro}{\parseunicodedata@auxii}
% \begin{macro}{\parseunicodedata@auxiii}
%   The first step of parsing a line of data is to check that it's not come
%   from a blank in the source, which will have been tokenized as \cs{par}.
%   Assuming that is not the case, there are lots of data items separated by
%   |;|. Of those, only a few are needed so they are picked out and everything
%   else is dropped.
%    \begin{macrocode}
\def\parseunicodedata#1{%
  \ifx#1\storedpar
  \else
    \expandafter\parseunicodedata@auxi#1\relax
  \fi
}
\def\parseunicodedata@auxi#1;#2;#3;#4;#5;#6;#7;#8;#9;{%
  \parseunicodedata@auxii#1;#3;
}
\def\parseunicodedata@auxii#1;#2;#3;#4;#5;#6;#7;#8\relax{%
  \parseunicodedata@auxiii{#1}{#2}{#6}{#7}%
}
%    \end{macrocode}
%   At this stage we have only four pieces of data
%   \begin{enumerate}
%     \item The code value
%     \item The general class
%     \item The uppercase mapping
%     \item The lowercase mapping
%   \end{enumerate}
%   where both one or both of the last two may be empty. Everything here could
%   be done in a single conditional within a \cs{write}, but that would be
%   tricky to follow. Instead, a series of defined auxiliaries are used to
%   show the flow. Notice that combining marks are treated as letters here
%   (the second `letter' test).
%    \begin{macrocode}
\def\parseunicodedata@auxiii#1#2#3#4{%
  \if L\firsttoken#2?\relax
    \expandafter\unicodeletter
  \else
    \if M\firsttoken#2?\relax
      \expandafter\expandafter\expandafter\unicodeletter
    \else
      \expandafter\expandafter\expandafter\unicodenonletter
    \fi
  \fi
    {#1}{#3}{#4}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\unicodeletter, \unicodenonletter}
% \begin{macro}{\writeunicodedata}
%   For `letters', we always want to write the data to file, and the only
%   question here is if the character has case mappings or these point back
%   to the character itself.
%    \begin{macrocode}
\def\unicodeletter#1#2#3{%
  \writeunicodedata\L{#1}{#2}{#3}%
}
%    \end{macrocode}
%   Cased non-letters can also exist: they can be detected as they have at
%   least one case mapping. Write these in much the same way as letters.
%    \begin{macrocode}
\def\unicodenonletter#1#2#3{%
  \ifx\relax#2#3\relax
  \else
    \writeunicodedata\C{#1}{#2}{#3}%
  \fi
}
%    \end{macrocode}
%   Actually write the data. In all cases both upper- and lower-case mappings
%   are given, so there is a need to test that both were actually available and
%   if not set up to do nothing.
%    \begin{macrocode}
\def\writeunicodedata#1#2#3#4{%
  \immediate\write\unicodewrite{%
    \space\space
    \string#1\space
    #2 %
    \ifx\relax#3\relax
      #2 %
    \else
      #3 %
    \fi
    \ifx\relax#4\relax
      #2 %
    \else
      #4 %
    \fi
    \expandafter\gobble\string\%
  }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% There is now a lead-in section which creates the macros which take the
% processed data and do the code assignments. Everything is done within a
% group so that there is no need to worry about names.
%    \begin{macrocode}
\verbatimcopy
\begingroup
\endverbatimcopy
%    \end{macrocode}
% Cased non-letters simply need to have the case mappings set.
% For letters, there are a few things to sort out. First, the case mappings are
% defined as for non-letters. Category code is then set to $11$ before a check
% to see if this is an upper case letter. If it is then the \cs{sfcode} is set
% to $999$. Finally there is a need to deal with Unicode math codes, where base
% plane letters are class $7$ but supplementary plane letters are class~$1$.
% Older versions of Xe\TeX{} used a different name here: easy to pick up as
% we know that this primitive must be defined in some way. There is also an issue
% with the supplementary plane and older Xe\TeX{} versions, which is dealt with
% using a check at run time.
%    \begin{macrocode}
\verbatimcopy
  \def\C#1 #2 #3 {%
    \XeTeXcheck{#1}%
    \global\uccode"#1="#2 %
    \global\lccode"#1="#3 %
  }
  \def\L#1 #2 #3 {%
    \C #1 #2 #3 %
    \catcode"#1=11 %
    \ifnum"#1="#3 %
    \else
      \global\sfcode"#1=999 %
    \fi
    \ifnum"#1<"10000 %
      \global\Umathcode"#1="7"01"#1 %
    \else
      \global\Umathcode"#1="0"01"#1 %
    \fi    
  }
  \ifx\Umathcode\undefined
    \let\Umathcode\XeTeXmathcode
  \fi
  \def\XeTeXcheck#1{}
  \ifx\XeTeXversion\undefined
  \else
    \def\XeTeXcheck.#1.#2-#3\relax{#1}
     \ifnum\expandafter\XeTeXcheck\XeTeXrevision.-\relax>996 %
       \def\XeTeXcheck#1{}
     \else
       \def\XeTeXcheck#1{%
          \ifnum"#1>"FFFF %
            \long\def\XeTeXcheck##1\endgroup{\endgroup}
            \expandafter\XeTeXcheck
          \fi
       }
     \fi
  \fi
\endverbatimcopy
%    \end{macrocode}
% Read the data and write the resulting code assignments to the file.
%    \begin{macrocode}
\openin\unicoderead=UnicodeData.txt %
\loop\unless\ifeof\unicoderead
  \read\unicoderead to \unicodedataline
  \parseunicodedata\unicodedataline
\repeat
%    \end{macrocode}
% End the group for setting character codes and assign a couple of special
% cases.
%    \begin{macrocode}
\verbatimcopy
\endgroup
\global\sfcode"2019=0 %
\global\sfcode"201D=0 %
\endverbatimcopy
%    \end{macrocode}
% Lua\TeX{} and older versions of Xe\TeX{} stop here: character classes are a
% Xe\TeX{}-only concept.
%    \begin{macrocode}
\verbatimcopy
\ifx\XeTeXinterchartoks\XeTeXcharclass
  \expandafter\endinput
\fi
\endverbatimcopy
%    \end{macrocode}
%
% Done: end the script.
%    \begin{macrocode}
\bye
%    \end{macrocode}
%    
%    \begin{macrocode}
%</script>
%    \end{macrocode}