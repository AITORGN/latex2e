% \iffalse meta-comment
%
% Copyright 1993-2014
% The LaTeX3 Project and any individual authors listed elsewhere
% in this file.
%
% This file is part of the LaTeX base system.
% -------------------------------------------
%
% It may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
%    http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This file has the LPPL maintenance status "maintained".
%
% The list of all files belonging to the LaTeX base distribution is
% given in the file `manifest.txt'. See also `legal.txt' for additional
% information.
%
% The list of derived (unpacked) files belonging to the distribution
% and covered by LPPL is defined by the unpacking scripts (with
% extension .ins) which are part of the distribution.
%
% \fi
%
% \iffalse
%
%<*dtx>
          \ProvidesFile{latexrelease.dtx}
%</dtx>
%<driver>\ProvidesFile{latexrelease.drv}
%<latexrelease>\ProvidesPackage{latexrelease}
% \fi
%         \ProvidesFile{latexrelease.dtx}
          [2015/01/99 v1.0b LaTeX release emulation and tests]
%
% \iffalse
%<*driver>
 \documentclass{ltxdoc}
 \newcommand\Lopt[1]{\textsf{#1}}
 \let\Lpack\Lopt
 \providecommand{\file}[1]{\texttt{#1}}
 \providecommand{\MF}{\textsf{Metafont}}
 \providecommand{\danger}{\marginpar[\hfill\protect\Huge!!]{\protect\Huge!!\hfill}}
 \begin{document}
 \DocInput{latexrelease.dtx}
 \end{document}
%</driver>
% \fi
%
% \CheckSum{96}
%
%
% \let\package\textsf
%
%
% \GetFileInfo{latexrelease.dtx}
%
% \title{The \Lpack{latexrelease} package\thanks{This file
%         has version number \fileversion, last
%         revised \filedate.}}
% \author{The LaTeX3 Project}
% \date{\filedate}
%  \maketitle
%
% \section{Introduction}
% Prior to the 2015 release of LaTeX, esentially no chnages had been
% made to the \LaTeX\ format code for some years, with all
% improvements being instead added to a package \Lpack{fixltx2e}.
%
% While this worked at a technical level it meant that ypu had to
% explictly opt-in to bug fixes and improvements, and teh vast
% majority of documents did not benefit.
%
% As described in \LaTeX\ News 22, a new policy is being implemented 
% in which improvements will now be added to the format by default,
% and this \Lpack{latexrelease} package may be used to ensure
% stability where needed, either by making a new format use an older
% definition of some commands, or conversely may be used to supply the
% new definitions for use with an old format.
%
% The basic use is:
% \begin{verbatim}
% \RequirePackage[2015/01/01]{latexrelease}
% \documentclass{article}
% ....
% \end{verbatim}
%
% After such a declaration the document will use definitions current
% in the January 2015 LaTeX, whether the actual format being used is
% older, or newer than that date. In the former case a copy of
% |latexrelease.sty| would need to be made available for use with the
% older format.  This may be used, for example, to share a document
% between co-workers using different \LaTeX\ releases, or to protect a
% document from being affected by system updates. As well as the
% definitions within the format itself, individual packages may use
% the comamdns defined here to  adjust their definitions to the
% specified date as described below.
%
%
% Th ebulk of this package, after some initial setup and option
% handling consists of a series of |\IncludeInRelease| commands
% which have been extracted from the main source files of the \LaTeX\
% format. these contain the old and new versions of any commands with
% modified defintitions.
%
% \section{Package Options}
% \begin{itemize}
% \item \emph{yyyy/mm/dd}
% The package accepts any \LaTeX\ format date as argument,% 
% although dates in the future for which the current release of this
% package has no information will generate a warning.
%
% \item%
% |current| This is the default behaviour, it does not change the
% effective date of the format but does ensure that the
% |\IncludeInRelease| comand is defined.
%
% \item
% |latest| sets the effective date of the format to the release date
% of this file, so in an older format applies all patches currently
% available.
% \end{itemize}
%
%
% \section{Release Specific Code}
% \DescribeMacro{\IncludeInRelease}
% \oarg{format-date}
% \marg{specified-date}
% \marg{label}
% \marg{message}
% \marg{code}
%
% The mechanism used to allow the user to specify a date to choose
% specific versions of definitions is also available for use by
% package authors (or even in a document if necessary).
% 
% The \marg{code} argument contains the \TeX\ code  that is to be
% conditionally included depending on the date of teh format as
% described below.
%
% The \marg{message} argument is an infomative string that is used in
% messages.
%
% The \marg{label} argument is a token that within a given package
% must be a unique label for each set of optional definitions. At mist
% one code block from all the |\IncludeInRelease| with th esame label
% will be executed.
%
% The |\IncludeInRelease| with a given label should be in reverse
% chronological order in the file. Th eone chosen will depend on the
% effective format version and the date options, as described below.
%
% If your package \Lpack{mypackage} defines a |\widget| command but
% has one definition using the features available in the 2015 \LaTeX\
% release, and a different definition is required for older formats
% then you can use:
%
% \begin{verbatim}
% \IncludeInRelease{2015/01/01}{\widget}{Widget Definition}{%
%  \def\widget{new version}%
% }
% \IncludeInRelease{000/00/00}{\widget}{Widget Definition}{%
%  \def\widget{old version}%
% }
% \end{verbatim}
%
% If a document using this package is used with a format with
% effective release date of 2015/01/01 or later the new code will be
% used, otherwise the old code will be used. Not the \emph{effective
% release date} might be the original \LaTeX\ release date as shown at
% the start of every \LaTeX\ job, or it may be set by the
% \Lpack{latexrelease} package, so for example a document author who
% wants to ensure the new version is used could use
%
% \begin{verbatim}
% \RequirePackage[2015/01/01{latexrelease}
% \documentclass{article}
% \usepackage{mypackage}
% \end{verbatim}
%
% If the document  is used with a \LaTeX\ format from 2014 or before,
% then \Lpack{latexrelease} will not have part of the original
% distribution, but it may be obtained from a later \LaTeX\ release or
% from CTAN and distributed with the document, it will make an older
% \LaTeX\ release act essentially like the 2015 release.
%
% The above example works well for testing against the latex format
% but is not always ideal for controlling code by the release date of
% the \emph{package}. Suppose \LaTeX\ is not updated but in March you
% update the \Lpack{mypackage} package and modify the definition of
% |\widget|. You could code the package as:
%
%  \begin{verbatim}
% \IncludeInRelease{2015/03/01}{\widget}{Widget Definition}{%
%  \def\widget{even newer improved March version}%
% }
% \IncludeInRelease{2015/01/01}{\widget}{Widget Definition}{%
%  \def\widget{new version}%
% }
% \IncludeInRelease{000/00/00}{\widget}{Widget Definition}{%
%  \def\widget{old version}%
% }
% \end{verbatim}
%
% This would work and allow a document author to choose a date such as
%
% \begin{verbatim}
% \RequirePackage[2015/03/01{latexrelease}
% \documentclass{article}
% \usepackage{mypackage}
% \end{verbatim}
%
% To use the latest version, however it would have disadvantage that
% until the next release of \LaTeX, by default, if the document does 
% not use \Lpack{latexrelease} to specify a date, the new improved
% code will not be selected as the effective date will be 2015/01/01
% and so the first code block will be skipped.
% 
% For this reason |\IncludeInRelease| has an optional argument that
% specifies an alternative date to use if a date option has not been
% specified to \Lpack{latexrelease}.
%
%  \begin{verbatim}
% \IncludeInRelease[2015/01/01]{2015/03/01}{\widget}{Widget Definition}{%
%  \def\widget{even newer improved March version}%
% }
% \IncludeInRelease{2015/01/01}{\widget}{Widget Definition}{%
%  \def\widget{new version}%
% }
% \IncludeInRelease{000/00/00}{\widget}{Widget Definition}{%
%  \def\widget{old version}%
% }
% \end{verbatim}
%
% Now, by default on a 2015/01/01 \LaTeX\ format, the first code block
% will compare the format date to the optional argument 2015/01/01
% and so will execute the \emph{even newer improved} version. Th
% eremaining blocks using the |\widget| label argumnent wil all then be
% skipped.
%
% \section{New commands added to the format since 2014/05/01}
%
% \DescribeMacro{\extrafloats}\marg{number}\\%
% This allocates additional registers for the \LaTeX\ float system to
% hold figures and tables etc. Similar functionality has been
% available via the \Lpack{morefloats} package but this is a different
% implemenation using extended e-\TeX\ registers when available so
% allows many more registers to be resreved for floats as they are
% allocated from a pool of 32 or 64 thousand rather than 256 registers,
% depending on the engine in use.
%
% \DescribeMacro{\newmarks}\marg{command}\\%
% e-\TeX\ only, previously available via the \Lpack{etex} package.
%
% \DescribeMacro{\newXeTeXintercharclass}\marg{command}\\%
% Xe-\TeX\ only, previously in the Xe-\LaTeX\ format, but added via
% |xelatex.ini| not part of the core release.
%
% \section
% [Changes since the 2014/05/01 \LaTeX\ release]
% {Changes since 2014/05/01 \LaTeX\ release\footnote{much of this text
% is taken from the former \Lpack{fixltx2e} package}}
%
%
% \subsection{e-\TeX\ tracing if available}
% |\loggingall| (Usually used via |\tracingall|) is extended to enable
% additional e-\TeX\ tracing if e-\TeX\ is available. (|\tracingall|
% extension has been available as part of the |etex| package.
%
% \subsection{New Allocation Code}
% Previously |\newcount| and related commands were based on classic
% TeX and only allocated in the range 0--255. This was extended (in
% different ways) for e-\TeX\ in the |etex| package and in the
% |xelatex.ini| and |lualatex.ini| files used in those
% formats. Related to this the number of boxes allocated to store
% floats was limited. This was extended to a certain extent in the
% |morefloats| package (by xx and xx) but the new allocation
% incorporates float allocation directly and supports much larger
% float lists using the extended registers.
%
% The new code allocates registers in the full extended range (
% $2^{15}-1$ for etex and xelatex, $2^{16}-1$ for lualatex.
% In addition a new command |\extrafloats| is provided, to be documented\ldots
%
% |\newmarks| and |\newXeTeXintercharclass| \ldots
%
%
% 
%
% \subsection{\texttt{\textbackslash textsubscript} not defined in
%    latex.ltx (pr/3492)}
%
%\begin{verbatim}
% >Number:         3492
% >Category:       latex
% >Synopsis:       \textsubscript not defined in latex.ltx
% >Arrival-Date:   Tue Jan 14 23:01:00 CET 2003
% >Originator:     tgakic@chem.tue.nl  (Ionel Mugurel Ciobica)
%
% I use \textsubscript much more often than \textsuperscript, and
% \textsubscript it is not defined in latex.ltx. Could you please
% consider including the definition of \textsubscript in the latex.ltx
% for the next versions of LaTeX.    Thank you.
%\end{verbatim}
%
% \subsection{\texttt{\textbackslash @} discards spaces when moving
%             (pr/3039)}
%
%\begin{verbatim}
% >Number:         3039
% >Category:       latex
% >Synopsis:       \@ discards spaces when moving
% >Arrival-Date:   Sat May 22 09:01:06 1999
% >Originator:     asnd@triumf.ca (Donald Arseneau)
% >Description:
% The \@ command expands to \spacefactor\@m in auxiliary files,
% which then ignores following spaces when it is reprocessed.
%\end{verbatim}
%
% \subsection{1-col fig can come before earlier 2-col fig
%            (pr/2346)}
%
%\begin{verbatim}
% >Number:         2346
% >Category:       latex
% >Synopsis:       2-col: 1-col fig can come before earlier 2-col fig
% >Arrival-Date:   Wed Dec 18 15:41:07 1996
% >Originator:     w.l.kleb@larc.nasa.gov (bil kleb)
% >Description:
% as documented in lamport's book, p. 198, concerning figure
% placement, "a figure will not be printed before an earlier
% figure, and a table will not be printed before an earlier
% table."  however, there is a footnote stating, "However,
% in two-column page style, a single-column figure can come before
% an earlier double-column figure, and vice versa."
%
% this twocolumn behavior is undesireable---at least by me and
% most professional organizations i publish in.  ed snyzter developed
% a hack fix for 2.09 several years ago which links the two
% counters, but i have not run across a similar "fix" for 2e...
% \end{verbatim}
%
% Originally fixed in package \Lpack{fix2col} which was merged into
% this package. Documentation and code from this package have been
% merged into this file.
%
% \subsubsection{Notes on the Implementation Strategy}
%
% The standard output routine maintains two lists of floats that have
% been `deferred' for later consideration. One list for single column
% floats, and one for double column floats (which are always
% immediately put onto their deferred list). This mechanism means
% that \LaTeX\ `knows' which type of float is contained in each box
% by the list that it is processing, but having two lists means
% that there is no mechanism for preserving the order between the
% floats in each list.
%
% The solution to this problem consists of two small changes to
% the output routine.
%
% Firstly, abandon the `double column float list' |\@dbldeferlist|
% and change every command where it is used so that instead the
% same |\@deferlist| is used as for single column floats.
% That one change ensures that double and single column floats
% stay in the same sequence, but as \LaTeX\ no longer `knows'
% whether a float is double or single column, it will happily
% insert a double float into a single column, overprinting the
% other column, or the margin.
%
% The second change is to provide an alternative mechanism for
% recording the two column floats. \LaTeX\ already has a compact
% mechanism for recording float information, an integer count register
% assigned to each float records information about the `type' of float
% `figure', `table' and the position information `htp' etc.
%
% The type information is stored in the `high' bits, one bit position
% (above `32') allocated to each float type. The `low' bits store
% information about the allowed positions, one bit each allocated for
% |h t b p|.  In the \LaTeX2.09 system, the bit corresponding to `16'
% formed a `boundary' between these two sets of information, and it
% was never actually used by the system. Ed Sznyter's
% \package{fixfloats} package not unreasonably used this position to
% store the double column information, setting the bit for double
% column floats. Then at each point in the output routine at which a
% float is committed to a certain region, an additional check must be
% made to check that the float is (or is not) double column. If it
% spans the wrong number of columns it is deferred rather than being
% added.
%
% Unfortunately the bit `16' is not available in \LaTeXe. It is used
% to encode the extra float position possibility `|!|' that was added
% in that system. It would be possible to use position `32' and to
% move the flags for `table', `figure',\ldots\ up one position, to
% start at 64, but this would mean that in principle one less float
% type would be supported, and more importantly is likely to break
% any other packages that assume anything about the output routine
% internals. So here I instead use another mechanism for flagging
% double column floats: By default all floats have depth 0pt.
% This package arranges that double column ones have depth 1sp.
% This information may then be used in the same manner as in
% the \package{fixfloats} package, to defer any floats that are not of
% the correct column spanning type.
%
%
%
% \subsection{Infinite glue found (pr/4023 and pr/2346)}
%
% The fix for pr/2346 had an issue when used in conjunction with
%  |\enlargethispage| as the latter introduced an infinite negative
%  glue at the bottom of the page. That in turn make a |\vsplit|
%  operation to get at the column marks invalid.
%
% \subsection{Wrong header for twocolumn (pr/2613)}
%
%\begin{verbatim}
% >Number:         2613
% >Category:       latex
% >Synopsis:       wrong headline for twocolumn
% >Arrival-Date:   Mon Sep 22 16:41:09 1997
% >Originator:     daniel@cs.uni-bonn.de (Daniel Reischert)
% >Description:
% When setting the document in two columns
% the headline shows the top mark of the second column,
% but it should show the top mark of the first column.
% \end{verbatim}
%
% Originally fixed in package \Lpack{fix2col} which was merged into
% this package. Documentation and code from this package have been
% merged into this file.
%
% \subsubsection{Notes on the Implementation Strategy}
%
% The standard \LaTeX\ twocolumn system works internally by making
% each column a separate `page' that is passed independently to \TeX's
% pagebreaker. (Unlike say the \package{multicol} package, where all
% columns are gathered together and then split into columns later,
% using |\vsplit|.) This means that the primitive \TeX\ marks that are
% normally used for header information, are globally reset after the
% first column. By default \LaTeX\ does nothing about this.
% A good solution is provided by Piet van Oostrum (building on earlier
% work of Joe Pallas) in his \package{fixmarks} package.
%
% After the first column box has been collected the mark information
% for that box is saved, so that any |\firstmark| can be
% `artificially' used to set the page-level marks after the second
% column has been collected. (The second column |\firstmark| is not
% normally required.) Unfortunately \TeX\ does not provide a direct
% way of knowing if any marks are in the page, |\firstmark| always has a
% value from previous pages, even if there is no mark in this page.
% The solution is to make a copy of the box and then |\vsplit| it
% so that any marks show up as |\splitfirstmark|.
%
% The use of |\vsplit| does mean that the output routine will globally
% change the value of |\splitfirstmark| and
% |\splitbotmark|. The \package{fixmarks} package goes to some trouble
% to save and restore these values so that the output routine does
% \emph{not} change the values. This part of \package{fixmarks} is not
% copied here as it is quite costly (having to be run on every page) and
% there is no reason why anyone writing code using |\vsplit| should
% allow the output routine to be triggered before the split marks have
% been accessed.
%
%
%
% \subsection{\texttt{\textbackslash setlength} produces error if
%   used with registers like \texttt{\textbackslash dimen0} (pr/3066)}
%
%\begin{verbatim}
% >Number:         3066
% >Category:       latex
% >Synopsis:       \setlength{\dimen0}{10pt}
% >Arrival-Date:   Tue Jul  6 15:01:06 1999
% >Originator:     oberdiek@ruf.uni-freiburg.de (Heiko Oberdiek)
% >Description:
% The current implementation of \setlength causes an error,
% because the length specification isn't terminated properly.
% More safe:
% \def\setlength#1#2{#1=#2\relax}
%\end{verbatim}

% \subsection{Fewer fragile commands}
%
%\begin{verbatim}
% >Number:         3816
% >Category:       latex
% >Synopsis:       Argument of \@sect has an extra }.
% >Arrival-Date:   Sat Oct 22 23:11:01 +0200 2005
% >Originator:     susi@uriah.heep.sax.de (Susanne Wunsch)
%
% Use of a \raisebox in \section{} produces the error message
% mentioned in the subject.
%
% PR latex/1738 described a similar problem, which has been solved
% 10 years ago. Protecting the \raisebox with \protect solved my
% problem as well, but wouldn't it make sense to have a similar fix
% as in the PR?
%
% It is particularly confusing, that an unprotected \raisebox in a
% \section*-environment works fine, while in a \section-environment
% produces error.
%\end{verbatim}
%
% While not technically a bug, in this day and age there are few
% reasons why commands taking optional arguments should not be robust.
%
% \subsubsection{Notes on the implementation strategy}
%
% Rather than changing the kernel macros to be robust, we have decided
% to add the macro \DescribeMacro{\MakeRobust}|\MakeRobust| in
% \Lpack{fixltx2e} so that users can easily turn fragile macros into
% robust ones. A macro |\foo| is made robust by doing the simple
% |\MakeRobust{\foo}|. \Lpack{fixltx2e} makes the following kernel
% macros robust: |\(|, |\)|, |\[|, |\]|,
%  |\makebox|, |\savebox|,
% |\framebox|, |\parbox|, |\rule| and |\raisebox|.
% 
% \ldots TODO \ldots  fleqn vesion of |\[\]| 
%
% \subsection{\texttt{\textbackslash addpenalty} ruins flush-bottom (pr/3073)}
%
%\begin{verbatim}
% >Number:         3073
% >Category:       latex
% >Synopsis:       \addpenalty ruins flush-bottom
% >Arrival-Date:   Sat Jul 17 05:11:05 1999
% >Originator:     asnd@triumf.ca (Donald Arseneau)
% >Description:
% Just to keep in mind for further development eh?
% A page break at an \addpenalty after \vspace does *not*
% give a flush-bottom page.  (The intent of \addpenalty is
% apparently just to preserve the flush bottom by putting
% the breakpoint `above' the skip.)
%\end{verbatim}
%
% \subsection{Within counters only reset next level down (pr4393)}
%
% This is actually implicitly documented behavior in the \LaTeX{}
% Manual that states that |\stepcounter| resets all counters marked
% ``within''. However it means that if, for example, theorems are
% numbered within sections and you start a new chapter in a book, the
% section counter is reset to zero but the theorem counter is not
% until the first section appears. Thus a theorem directly within the
% chapter body (without a new section) would show an incremented
% number relative to the last theorem of the previous chapter.
%
%
% For this reason we are now resetting all levels of within in one go
% even if that means that some of these resets may happen several times
% unnecessarily.
% 
%
% \subsection{Check the optional arguments of floats}
%
% By default LaTeX silently ignores unknown letters in the optional
% arguments of floats. |\begin{figure}[tB]| the |B| is ignored so it
% acts like |\begin{figure}[t]| However |\begin{figure}[B]| does
% \emph{not} act like |\begin{figure}[]| as the check for an empty
% argument, or unsupplied argument, is earlier. |[]| causes the
% default float placement to be used, but |[B]| means that \emph{no}
% float area is allowed and so the float will not be placed until the
% next |\clearpage| or end of document, no warning is given.
%
% This package adds a check on each letter, and if it not one of
% |!tbhp| then an error is given and the code acts as if |p| had been
% used, so that the float may be placed somewhere.
%
% \subsection{\texttt{\textbackslash DeclareMathSizes} only take pts.
%     (pr/3693)}
%
%\begin{verbatim}
% >Number:         3693
% >Category:       latex
% >Synopsis:       \DeclareMathSizes only take pts.
% >Arrival-Date:   Fri Jun 11 16:21:00 CEST 2004
% >Originator:     moho01ab@student.cbs.dk  (Morten Hoegholm)
%
% The last three arguments of \@DeclareMathSizes cannot take a dimension
% as argument, making it inconsistent with the rest of the font changing
% commands and itself, as the second argument can take a dimension
% specification.
%\end{verbatim}
%
% \subsection{No hyphenation in first word after float environment (pr/3498)}
%
%\begin{verbatim}
% >Number:         3498
% >Category:       latex
% >Synopsis:       No hyphenation in first word after float environment
% >Arrival-Date:   Thu Jan 30 13:21:00 CET 2003
% >Originator:     h.harders@tu-bs.de (Harald Harders)
%
% If a float environment (figure, table) is written within a paragraph,
% the first word after the environment is not hyphenated.
%\end{verbatim}
%
% \subsection{\texttt{\textbackslash fnsymbol} should use text symbols
%    if possible (pr/3400)}
%
%\begin{verbatim}
% >Number:         3400
% >Category:       latex
% >Synopsis:       \fnsymbol should use text symbols if possible
% >Arrival-Date:   Fri Jan 04 20:41:00 CET 2002
% >Originator:     was@VR-Web.de  ( Walter Schmidt )
%
% The \fnsymbol command can be used in both text and math
% mode.  The symbols produced are, however, always taken from
% the math fonts.  As a result, they may not match the text
% fonts, even if the symbols are actually available, for
% instance from the TS1 encoding.  Since \fnsymbol is
% primarily used for footnotes in text, this should be fixed,
% IMO.
%\end{verbatim}
%
%
%
%
%
% \subsection{\texttt{\textbackslash footnotemark[x]} crashes with fixltx2e.sty
%    (pr/3752)}
%
%\begin{verbatim}
% >Number:         3752
% >Category:       tools
% >Synopsis:       feature \footnotemark[x] crashes with fixltx2e.sty
% >Arrival-Date:   Fri Dec 17 10:11:00 +0100 2004
% >Originator:     stefan.pofahl@zsw-bw.de (Stefan Pofahl)
%
%  If I use /fnsymbol together with fixltx2e.sty I can not use
%  optional parameter [num]
%  \footnotemark[1] is not showing the mark number 1 but
%  the mark \value{footnote}.
%\end{verbatim}
% This bug was related to pr/3400, where |\@fnsymbol| was made robust.
%
% \subsubsection{Notes on the implementation strategy}
%
% Pr/3400 made |\@fnsymbol| decide between text-mode and math-mode,
% which requires a certain level of robustness somewhere as the
% decision between text and math must be made at typesetting time and
% not when inside |\protected@edef| or similar commands. One way of
% dealing with this is to make sure the value seen by |\@fnsymbol| is
% a fully expanded number, which could be handled by code such as
% \begin{verbatim}
% \def\fnsymbol#1{\expandafter\@fnsymbol
%   \expandafter{\the\csname c@#1\endcsname}}
% \end{verbatim}
% This would be a good solution if everybody used the high level
% commands only by writing code like |\fnsymbol{footnote}|. Unfortunately
% many classes (including the standard classes) and packages use the
% internal forms directly as in |\@fnsymbol\c@footnote| so the easy
% solution of changing |\fnsymbol| would break code that had worked for
% the past 20~years.
%
% Therefore the implementation here makes |\@fnsymbol| itself a
% non-robust command again and instead uses a new robust command
% \DescribeMacro{\TextOrMath}|\TextOrMath|, which will take care of
% typesetting either the math or the text symbol. In order to do so,
% we face an age old problem and unsolvable problem in \TeX: A
% reliable test for math mode that doesn't destroy
% kerning. Fortunately this problem can be solved when using e\TeX\ so
% if you use this as engine for your \LaTeX\ format, as recommended by
% the \LaTeX3 Project, you will get a fully functioning |\TextOrMath|
% command with no side effects. If you use regular \TeX\ as engine for
% your \LaTeX\ format then we have to choose between the lesser of two
% evils: 1)~breaking ligatures and preventing kerning or 2)~face the
% risk of choosing text-mode at the beginning of an alignment cell,
% which was supposed to be math-mode. We have decided upon 1) as is
% customary for regular robust commands in \LaTeX.
%
%
% \StopEventually{}
%
% \section{Implementation}
%
% We require at least a somewhat sane version of \LaTeXe{}. Earlier
% ones where really quite different from one another.
%    \begin{macrocode}
%<*latexrelease>
\NeedsTeXFormat{LaTeX2e}[1996/06/01]
%    \end{macrocode}
%
% \section{Setup}
%
% \begin{macro}{\IncludeInRelease}
%    \begin{macrocode}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\DeclareOption*{%
  \def\@IncludeInRelease[#1]#2{\@IncludeInRele@se{#2}}%
  \let\requestedpatchdate\CurrentOption}
\DeclareOption{latest}{%
  \let\requestedpatchdate\latexreleaseversion}
\DeclareOption{current}{%
  \let\requestedpatchdate\fmtversion}
%    \end{macrocode}
%
%    \begin{macrocode}
\ExecuteOptions{current}
\ProcessOptions\relax
%    \end{macrocode}
%
% Sanity check options, it allows some non-legal dates but always
% ensures |requestedLaTeXdate| gets set to a number.
% Generate an error if there are any non digit tokens remaining after removing the |//|.
%    \begin{macrocode}
\def\reserved@a{%
\edef\requestedLaTeXdate{\the\count@}%
\reserved@b}
\def\reserved@b#1\\{%
\def\reserved@b{#1}%
\ifx\reserved@b\@empty\else
\PackageError{latexrelease}%
             {Unexpected option \requestedpatchdate}%
             {The option must be of the form yyyy/mm/dd}%
\fi}
\afterassignment\reserved@a
\count@\expandafter
  \@parse@version\expandafter0\requestedpatchdate//00\@nil\\
%    \end{macrocode}
%
% less precautions needed for |\fmtversion|
%    \begin{macrocode}
\edef\currentLaTeXdate{%
   \expandafter\@parse@version\fmtversion//00\@nil}
%    \end{macrocode}
%
%    \begin{macrocode}
\ifnum\requestedLaTeXdate=\currentLaTeXdate
\PackageWarningNoLine{latexrelease}{%
  Current format date selected, no patches applied.}
\expandafter\endinput
\fi
%    \end{macrocode}
%
% A newer version of latexrelease should have been distributed with the later format.
%    \begin{macrocode}
\ifnum\currentLaTeXdate
  >\expandafter\@parse@version\latexreleaseversion//00\@nil
\PackageWarningNoLine{latexrelease}{%
The current package is for an older LaTeX format:\MessageBreak
LaTeX \fmtversion\space\MessageBreak
Obtain a newer version of this package!}
\expandafter\endinput
\fi
%    \end{macrocode}
% can't patch into the future, could make this an error
% but it has some uses to control package updates
% so allow for now.
%    \begin{macrocode}
\ifnum\requestedLaTeXdate
  >\expandafter\@parse@version\latexreleaseversion//00\@nil
\PackageWarningNoLine{latexrelease}{%
The current package is for LaTeX \latexreleaseversion:\MessageBreak
It has no patches beyond that date\MessageBreak
There may be an updated version\MessageBreak
of this package available from CTAN}
\expandafter\endinput
\fi
%    \end{macrocode}
%
% Update the format version to the requested date.
%    \begin{macrocode}
\let\fmtversion\requestedpatchdate
\let\currentLaTeXdate\requestedLaTeXdate
%    \end{macrocode}
%
%
% \section{Individual  Changes}
%
% The code for each change will be inserted at this point, extracted from the kernel source files.
%    
%    \begin{macrocode}
%</latexrelease>
%    \end{macrocode}
% \Finale
%
\endinput
